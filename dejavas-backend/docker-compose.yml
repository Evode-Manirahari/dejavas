version: '3.8'

services:
  # Dejavas Backend API
  dejavas-backend:
    build: .
    container_name: dejavas-backend
    ports:
      - "8000:8000"
    environment:
      - DEJAVAS_ENVIRONMENT=production
      - DEJAVAS_API_KEY=${DEJAVAS_API_KEY:-your_api_key_here}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-your_openai_key_here}
      - DATABASE_URL=postgresql://dejavas:dejavas123@postgres:5432/dejavas
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - dejavas-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dejavas-postgres
    environment:
      - POSTGRES_DB=dejavas
      - POSTGRES_USER=dejavas
      - POSTGRES_PASSWORD=dejavas123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - dejavas-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: dejavas-redis
    command: redis-server --appendonly yes --requirepass dejavas123
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - dejavas-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: dejavas-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - dejavas-backend
    restart: unless-stopped
    networks:
      - dejavas-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: dejavas-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - dejavas-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: dejavas-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=dejavas123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - dejavas-network

  # Elasticsearch for Log Aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: dejavas-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - dejavas-network

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: dejavas-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - dejavas-network

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: dejavas-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: unless-stopped
    networks:
      - dejavas-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  dejavas-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
